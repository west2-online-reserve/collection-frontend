<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
</head>

<body>
  <h1>作用域</h1>

  <h2>1.局部作用域</h2>
  <h3>1.1函数作用域:在函数内部声明的变量,外部无法访问;函数执行完毕后,内部的变量实际被清空了</h3>
  <h3>1.2块作用域:在{}内声明的变量,外部可能无法访问</h3>
  <p>let和const声明的有块作用域,var声明的没有块作用域</p>

  <h2>2.全局作用域</h2>
  <p>script标签 和 外源js文件 就是全局作用域</p>
  <p>window对象动态添加的属性默认为全局,不推荐</p>
  <p>函数中未使用任何关键字声明的变量为全局变量,不推荐</p>
  <p><strong>尽可能少地声明全局变量,防止变量为污染</strong></p>

  <h2>3.作用域链</h2>
  <p>作用域链本质是底层的变量查找机制</p>
  <h3>3.1优先查找当前作用域</h3>
  <h3>3.2当前查找不到,逐级查找父级作用域</h3>

  <script>
    let a = 1
    let b = 2
    function f() {
      // console.log(a);
      let a = 3
      console.log(a);
      function g() {
        console.log(a);
        a = 4
        console.log(a);
      }
      g()
    }
    f()
    console.log(a);
  </script>

  <h2>4.js垃圾回收机制(GC)</h2>
  <h4>4.1.内存分配:声明变量、函数、对象时自动分配内存</h4>
  <h4>4.2.内存使用:读写内存,使用变量、函数等</h4>
  <h4>4.3.内存回收:使用完毕,由垃圾回收器自动回收不再使用的内存</h4>
  <p>全局变量一般不回收(关闭页面回收)</p>
  <p>局部变量不用了会被自动回收</p>
  <h4>4.4内存泄漏:内存未释放或无法释放</h4>

  <h3>4.5算法说明</h3>
  <p>栈堆空间分配说明</p>
  <p>栈:由操作系统自动分配释放的函数的参数值、局部变量等。基本数据类型放到栈里</p>
  <p>堆:一般由程序员分配释放,若程序员不释放,由垃圾回收机制回收。复杂数据类型放到堆里</p>
  <h4>垃圾回收算法:引用计数法,标记清除法</h4>
  <h3>1.引用计数法</h3>
  <script>
    //1.引用计数法
    //定时计数

    //看以下范例
    let arr = [1, 2, 3, 4]
    arr = null
    //开始时arr的地址存在栈里,[1,2,3,4]存在堆里,此时引用次数为1
    //将null赋值给arr后
    //从复杂数据类型变为简单数据类型,存储于栈的arr地址变为null
    // 此时[1,2,3,4]引用次数为0

    //若将null赋值给arr前
    //先将arr地址 赋值给另一个 变量p
    let p = arr
    //则最后引用次数仍为1
  </script>
  <p>缺点:嵌套引用:如果两个对象相互引用,尽管不再使用,垃圾回收器也不会回收,导致内存泄漏</p>
  <h3>2.标记清除法</h3>
  <p>定时扫描</p>
  <p>从根部无法到达的被标记为不使用,稍后回收</p>
  <script>
    //2.标记清除法
    //定时扫描
    //从根部无法到达的被标记为不使用,稍后回收
  </script>

  <h2>5.闭包</h2>
  <p>概念:一个函数对周围状态的函数捆绑在一起,内层函数访问到其外层函数作用域</p>
  <p>闭包 = 内层函数 + 外层函数变量</p>
  <p>场景:外部访问使用函数内部的变量</p>
  <p>应用:实现数据的私有</p>
  <p>风险:内存泄漏</p>
  <script>
    function outer() {
      let c = 111;
      function inner() {
        console.log(c);
      }
      return inner//返回函数
    }
    const func = outer()//将函数赋值给func
    func()


    function part() {
      let i = 0//内部声明,外部无法直接修改
      function plus() {
        i++
        console.log(i);
      }
      return plus
    }
    const plust = part()

  </script>

  <h2>6.变量提升</h2>
  <p>允许变量在变量声明之前被访问(仅存在于var声明变量)</p>
  <p>代码执行之前,会将当前作用域下var声明的变量,提升到当前作用域前</p>
  <p>只提升声明,不提升赋值</p>
  <script>
    console.log('num = ' + num);//num = undefined
    var num = 10
    console.log('num = ' + num);//num = 10

  </script>
</body>

</html>