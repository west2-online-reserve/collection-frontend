<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <style>
    .red {
      color: red;
    }

    .blue {
      background-color: blue;

    }
  </style>
</head>

<body>
  <h2>修改元素属性</h2>

  <h3>1.常用属性</h3>
  <p>对象.属性=值</p>


  <h3>2.样式属性</h3>

  <h4>1.通过style属性</h4>
  <p>html对象.style.样式属性=值</p>
  <p>含短横线的用小驼峰表示</p>

  <h4>2.通过类名(className)</h4>
  <p>提前用css准备一个类</p>
  <p>html对象.className=值</p>
  <div class="red">12313312311233</div>
  <script>
    const div = document.querySelector('div')

    div.className = 'blue'//会覆盖
    // div.className += ' blue'//注意空格
    // div.className = 'red blue'
  </script>


  <h4>3.通过classList</h4>
  <p>1.追加</p>
  <p>html元素.classList.add('类名')</p>
  <p>2.删除</p>
  <p>html元素.classList.remove('类名')</p>
  <p>3.切换</p>
  <p>html元素.classList.toggle('类名')</p>
  <p>有就删,没就加(做开关)</p>
  <p>4.确认</p>
  <p>html元素.classList.contains('类名')</p>
  <p>确认是否包含类,有就true,无就false(做开关)</p>


  <style>
    div,
    ul,
    li {
      margin: 0;
      padding: 0;
    }

    .box {
      position: relative;
      width: 200px;
      height: 200px;
      background-color: #575353;
    }

    .box .color {
      width: 200px;
      height: 170px;
      font-size: 30px;
      text-align: center;
      line-height: 170px;
      color: #ffffff;
      background-color: blue;
    }

    .box ul {
      position: absolute;
      bottom: 7px;
      left: 50%;
      transform: translateX(-50%);
      /* background-color: blue; */

    }

    .box ul li {
      display: inline-block;
      width: 5px;
      height: 5px;
      border-radius: 50%;
      background-color: rgb(154, 153, 153);
    }

    .box ul .active {
      transform: scale(1.2);
      background-color: #ffffff;
    }
  </style>
  <div class="box">
    <div class="color">蓝</div>
    <ul>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
    </ul>
  </div>
  <p>(随机颜色)</p>
  <script>
    //随机背景颜色,仿轮播图
    const colorArr = [
      { uname: '蓝', color: 'blue' },
      { uname: '黄', color: 'yellow' },
      { uname: '红', color: 'red' },
      { uname: '绿', color: 'green' },
      { uname: '黑', color: 'black' },
    ]
    const ranNum = parseInt(Math.random() * colorArr.length)
    const divColor = document.querySelector('.box .color')
    divColor.style.backgroundColor = colorArr[ranNum].color//行内样式
    divColor.innerHTML = colorArr[ranNum].uname
    const ranPoint = document.querySelector(`.box ul li:nth-child(${ranNum + 1})`)
    ranPoint.classList.add('active')

  </script>



  <h3>3.表单元素属性</h3>
  <p>获取:DOM对象.属性名</p>
  <p>设置:DOM对象.属性名=新值</p>
  <p> innerHTML无法获取表单元素的内容</p>
  <p> 表单元素的内容通过.value获取</p>

  <input type="text" value="123">
  <input type="checkbox">
  <script>
    //获取元素
    const uname = document.querySelector('input')
    //获取值
    console.log(uname.value);//123
    console.log(uname.innerHTML);//123
    //innerHTML无法获取表单元素的内容
    //表单元素的内容通过.value获取


    //复选框勾选
    //checked默认选择(input),selected默认选择(下拉多选),disabled禁用(按钮?)
    const ipt = document.querySelector('input[type="checkbox"]')
    console.log(ipt.checked);
    //勾选时值为true,空时值为false

  </script>
  <h3>4.自定义属性</h3>
  <p>H5中推出了专门的data-自定义属性</p>
  <p>在标签上一律以data-开头</p>
  <p>在DOM对象上一律以dataset(date集合)对象方式获取</p>
  <div class="dl" data-id="111"></div>
  <div class="dl" data-id="2"></div>
  <div class="dl" data-id="3"></div>
  <div class="dl" data-id="4"></div>
  <div class="dl" data-id="5"></div>
  <script>
    const dl1 = document.querySelector('.dl')
    console.log(dl1);
    console.dir(dl1);
    console.log(dl1.dataset);
    console.dir(dl1.dataset);
    console.log(dl1.dataset.id);
    console.dir(dl1.dataset.id);
  </script>
</body>

</html>